#!/usr/bin/env ruby -Ilib

require 'rof'
require 'optparse'

fedora_info = {}
noids = {}
prefix = nil
bendo_info = nil
search_path = ["."]
opt = OptionParser.new do |opts|
  opts.banner = %q{Usage: rof [options] <command> <input files>
  command is one of:
    compare
    ingest
    validate
    filter <filter name>

  Filtering sends transformed objects to stdout.

  Possible filters are:
    bendo, collections, datestamp, file-to-url, label, work}

  opts.on("", "--fedora URL", "Base Fedora URL") do |url|
    fedora_info[:url] = url
  end
  opts.on("", "--bendo URL", "Base Bendo URL") do |url|
    bendo_info = url
  end
  opts.on("", "--user STRING", "Username and password (colon separated) for fedora") do |u|
    fedora_info[:user], fedora_info[:password] = u.split(':')
  end
  opts.on("", "--noids STRING", "Noids server path and pool name (colon separated)") do |u|
    noids[:noid_server], _, noids[:pool_name] = u.rpartition(':')
  end
  opts.on("", "--prefix STRING", "Prefix for label identifiers") do |s|
    prefix = s
  end
  opts.on("", "--path PATH", "Colon seperated search path for files for ingest or validation. Defaults to the current directory") do |s|
    search_path = s.split(":")
  end
end

opt.parse!

fedora_info = nil if fedora_info.empty?

case ARGV[0]
when "compare"
  error_count = ROF::CLI.compare_files(ARGV[1], ARGV[2], STDOUT, fedora_info, bendo_info)
  exit 1 if error_count > 0
when "ingest", "validate"
  error_count = ROF::CLI.ingest_file(ARGV[1], search_path, STDOUT, fedora_info, bendo_info)
  exit 1 if error_count > 0
when "filter"
  filter_name = ARGV[1]
  file_name = ARGV[2]
  filter = ROF::Filters.for(filter_name, file_name: file_name, bendo_info: bendo_info, prefix: prefix, noids: noids)
  ROF::CLI.filter_file(filter, file_name, STDOUT)
else
  STDERR.puts "Unknown command #{ARGV[0]}"
  STDERR.puts opt.help
  exit 3
end
